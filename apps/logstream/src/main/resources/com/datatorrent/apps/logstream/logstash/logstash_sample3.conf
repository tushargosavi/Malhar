input {
  stdin {
    type => "stdin-type"
  }

  file {
    type => "apache-logs"
    path => "/home/ashwin/logstash/logs11/apache*.log"
  }
  file {
    type => "mysql-logs"
    path => "/home/ashwin/logstash/logs11/mysql*.log"
  }
  file {
    type => "syslogs"
    path => "/var/log/syslog"
  }
  file {
    type => "system"
    path => "/home/ashwin/logstash/logs11/stats/stats*.log"
  }
}


filter {
  grok { 
    singles => true
    type => "apache-logs"
    pattern => "%{COMBINEDAPACHELOG}" 
  }

  geoip {
    type => "apache-logs"
    source => "clientip"
    #database => "/sfw/geolite/GeoIP.dat"
    database => "/sfw/geolite/GeoLiteCity.dat"
  }

  useragent {
    type => "apache-logs"
    source => "agent"
    target => "agentinfo"
  }

  grok { 
    type => "syslogs"
    pattern => "%{SYSLOGBASE}" 
  }

  ##### mysql slow query log config #####

  multiline {
    type => "mysql-logs"
    pattern => "^# Time: "
    negate => true
    what => previous
  }

  grep {
    type => "mysql-logs"
    match => ["message", "Time                 Id Command    Argument"]
    negate => true
  }

  grok {
    type => "mysql-logs"
    singles => true
    pattern => [
      "^# Time: %{NUMBER:date} *%{NOTSPACE:time}\r\n# User@Host: %{USER:user}\[[^\]]+\] @ %{HOST:host} \[%{IP:ip}?]\r\n# Query_time: %{NUMBER:query_time:float} \s*Lock_time: %{NUMBER:lock_time:float} \s*Rows_sent: %{NUMBER:rows_sent:int} \s*Rows_examined: %{NUMBER:rows_examined:int}(?<query_set>(.|\n)*)"
    ]
  }

  # put the timestamp into a single field
  mutate { 
    type => "mysql-logs"
    replace => [ "timestamp", "%{date} %{time}" ] 
  }
  
  # parse the timestamp, which could be one or two digits.
  date { 
    type => "mysql-logs"
    match => ["timestamp", "YYMMdd H:mm:ss", "YYMMdd HH:mm:ss" ] 
  }
  
  # remove time/date fields only previously added for parsing.
  mutate { 
    type => "mysql-logs"
    remove => [ "time", "date" ] 
  }

  ##### combined mem, cpu, disk log #####
  multiline {
    type => "system"
    pattern => "^timestamp: "
    negate => true
    what => previous
  }
  grok {
    # reference : http://man7.org/linux/man-pages/man5/proc.5.html
    # reference : http://lxr.osuosl.org/source/Documentation/iostats.txt
    type => "system"
    singles => true
    pattern => ["timestamp: *%{NUMBER:timestamp} *\nMemTotal: *%{NUMBER:MemTotal} *kB\nMemFree: *%{NUMBER:MemFree} *kB\nBuffers: *%{NUMBER:Buffers} *kB\nCached: *%{NUMBER:Cached} *kB\nSwapCached: *%{NUMBER:SwapCached} *kB\nActive: *%{NUMBER:Active} *kB\nInactive: *%{NUMBER:Inactive} *kB\nActive\(anon\): *%{NUMBER:Active_anon} *kB\nInactive\(anon\): *%{NUMBER:Inactive_anon} *kB\nActive\(file\): *%{NUMBER:Active_file} *kB\nInactive\(file\): *%{NUMBER:Inactive_file} *kB\nUnevictable: *%{NUMBER:Unevictable} *kB\nMlocked: *%{NUMBER:Mlocked} *kB\nSwapTotal: *%{NUMBER:SwapTotal} *kB\nSwapFree: *%{NUMBER:SwapFree} *kB\nDirty: *%{NUMBER:Dirty} *kB\nWriteback: *%{NUMBER:Writeback} *kB\nAnonPages: *%{NUMBER:AnonPages} *kB\nMapped: *%{NUMBER:Mapped} *kB\nShmem: *%{NUMBER:Shmem} *kB\nSlab: *%{NUMBER:Slab} *kB\nSReclaimable: *%{NUMBER:SReclaimable} *kB\nSUnreclaim: *%{NUMBER:SUnreclaim} *kB\nKernelStack: *%{NUMBER:KernelStack} *kB\nPageTables: *%{NUMBER:PageTables} *kB\nNFS_Unstable: *%{NUMBER:NFS_Unstable} *kB\nBounce: *%{NUMBER:Bounce} *kB\nWritebackTmp: *%{NUMBER:WritebackTmp} *kB\nCommitLimit: *%{NUMBER:CommitLimit} *kB\nCommitted_AS: *%{NUMBER:Committed_AS} *kB\nVmallocTotal: *%{NUMBER:VmallocTotal} *kB\nVmallocUsed: *%{NUMBER:VmallocUsed} *kB\nVmallocChunk: *%{NUMBER:VmallocChunk} *kB\nHardwareCorrupted: *%{NUMBER:HardwareCorrupted} *kB\nAnonHugePages: *%{NUMBER:AnonHugePages} *kB\nHugePages_Total: *%{NUMBER:HugePages_Total}\nHugePages_Free: *%{NUMBER:HugePages_Free}\nHugePages_Rsvd: *%{NUMBER:HugePages_Rsvd}\nHugePages_Surp: *%{NUMBER:HugePages_Surp}\nHugepagesize: *%{NUMBER:Hugepagesize} *kB\nDirectMap4k: *%{NUMBER:DirectMap4k} *kB\nDirectMap2M: *%{NUMBER:DirectMap2M} *kB\n%{NOTSPACE:cpu} *%{NUMBER:user_hz} *%{NUMBER:ice_hz} *%{NUMBER:system_hz} *%{NUMBER:idle_hz} *%{NUMBER:io_wait_hz} *%{NUMBER:irq_hz} *%{NUMBER:softirq_hz} *%{NUMBER:steal_hz} *%{NUMBER:guest_hz} *%{NUMBER:guest_nice_hz} *\n *%{NUMBER} *%{NUMBER} *%{NOTSPACE:disk} *%{NUMBER:reads} *%{NUMBER:reads_merged} *%{NUMBER:sector_reads} *%{NUMBER:reads_ms} *%{NUMBER:writes} *%{NUMBER:writes_merged} *%{NUMBER:sector_writes} *%{NUMBER:writes_ms} *%{NUMBER:io} *%{NUMBER:io_ms} *%{NUMBER:io_wait_ms} *%{GREEDYDATA}"]
  }

}

output {
  stdout {
    type => "stdin-type"
    #type => "apache-logs"
    #debug => "true"
    #codec => "json"
   }
  rabbitmq {
    type => "apache-logs"
    host => "localhost"
    exchange => "logsExchange"
    exchange_type => "direct"
    key => "apache"
    durable => "false"    
  }
  rabbitmq {
    type => "mysql-logs"
    host => "localhost"
    exchange => "logsExchange"
    exchange_type => "direct"
    key => "mysql"
    durable => "false"    
  }
  rabbitmq {
    type => "syslogs"
    host => "localhost"
    exchange => "logsExchange"
    exchange_type => "direct"
    key => "syslog"
    durable => "false"    
  }  
  rabbitmq {
    type => "system"
    host => "localhost"
    exchange => "logsExchange"
    exchange_type => "direct"
    key => "system"
    durable => "false"    
  }  
  #elasticsearch { embedded => true }
}
